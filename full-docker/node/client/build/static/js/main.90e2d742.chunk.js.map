{"version":3,"sources":["wpcomvip_logo_main-white.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","React","useState","count","setCount","foods","setFoods","a","fetch","res","json","resData","items","data","forEach","item","push","title","rendered","image","_embedded","media_details","sizes","medium","source_url","caption","link","className","src","logo","alt","style","fontSize","onChange","event","target","value","placeholder","type","onClick","map","food","key","width","display","marginTop","justifyContent","alignItems","borderRadius","height","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,sD,qNC6E5BC,MAxEf,WAAgB,IAAD,EACaC,IAAMC,SAAS,GAD5B,mBACNC,EADM,KACCC,EADD,OAEaH,IAAMC,SAAS,IAF5B,mBAENG,EAFM,KAECC,EAFD,iDAIb,gCAAAC,EAAA,sEACoBC,MAAM,oCAAD,OAAqCL,IAD9D,cACQM,EADR,gBAEwBA,EAAIC,OAF5B,OAEQC,EAFR,OAIMC,EAAQ,GACZD,EAAQE,KAAKC,SAAS,SAAAC,GACpBH,EAAMI,KAAK,CACTC,MAAOF,EAAKE,MAAMC,SAClBC,MAAOJ,EAAKK,UAAU,oBAAoB,GAAGC,cAAcC,MAAMC,OAAOC,WACxEC,QAASV,EAAKK,UAAU,oBAAoB,GAAGK,QAAQP,SACvDQ,KAAMX,EAAKK,UAAU,oBAAoB,GAAGM,UAGhDpB,EAASM,GAbX,4CAJa,sBAoBb,OACE,yBAAKe,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,6BACE,2CACA,2BACEC,MAAO,CACLC,SAAU,QAEZC,SAAU,SAAAC,GAAK,OAAI9B,EAAS8B,EAAMC,OAAOC,QACzCC,YAAY,kBACZC,KAAK,WAEP,4BACEP,MAAO,CACLC,SAAU,QAEZO,QAtCG,4CAkCL,UAMA,6BAEElC,EAAMmC,KAAI,SAAAC,GAAI,OACZ,yBAAKC,IAAKD,EAAKxB,MACfc,MAAO,CACLY,MAAO,OACPC,QAAS,OACTC,UAAW,QACXC,eAAgB,gBAChBC,WAAY,WAEZ,yBACEhB,MAAO,CACLiB,aAAc,MACdC,OAAQ,QAEVrB,IAAKa,EAAKtB,MACVW,IAAKW,EAAKhB,UAEZ,6BACE,4BAAKgB,EAAKhB,SACV,2BAAG,uBAAGyB,KAAK,eAAR,uBCtDDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.90e2d742.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wpcomvip_logo_main-white.cc61dd33.svg\";","import React from 'react';\nimport logo from './wpcomvip_logo_main-white.svg';\nimport './App.css';\nimport { SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS } from 'constants';\n\nfunction App() {\n  const [count, setCount] = React.useState(0)\n  const [foods, setFoods] = React.useState([])\n\n  async function getFoods() {\n    const res = await fetch(`http://localhost:4000/food?count=${count}`)\n    const resData = await res.json()\n\n    var items = [];\n    resData.data.forEach( item => {\n      items.push({\n        title: item.title.rendered,\n        image: item._embedded['wp:featuredmedia'][0].media_details.sizes.medium.source_url,\n        caption: item._embedded['wp:featuredmedia'][0].caption.rendered,\n        link: item._embedded['wp:featuredmedia'][0].link\n      })\n    })\n    setFoods(items)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n          <h1>Dutch Foods</h1>\n          <input\n            style={{\n              fontSize: '2rem'\n            }}\n            onChange={event => setCount(event.target.value)}\n            placeholder='Number of items'\n            type='number'\n          />\n          <button\n            style={{\n              fontSize: '2rem'\n            }}\n            onClick={getFoods}>Submit\n          </button>\n          <br />\n          {\n            foods.map(food => (\n              <div key={food.title}\n              style={{\n                width: '100%',\n                display: 'flex',\n                marginTop: '0.5em',\n                justifyContent: 'space-between',\n                alignItems: 'center'\n              }}>\n                <img\n                  style={{\n                    borderRadius: '50%',\n                    height: '100%'\n                  }}\n                  src={food.image}\n                  alt={food.caption}\n                />\n                <div>\n                  <em>{food.caption}</em>\n                  <p><a href=\"{food.link}\">Read More</a></p>\n                </div>\n              </div>\n            ))\n          }\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}