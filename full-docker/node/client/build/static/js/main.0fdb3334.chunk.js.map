{"version":3,"sources":["Item.jsx","Items.jsx","App.js","serviceWorker.js","index.js","wpcomvip_logo_main-white.svg"],"names":["Item","addVote","vote","subtractVote","dir","console","log","fetch","props","nodeUrl","type","id","method","then","result","json","key","this","src","image","alt","title","className","votes","onClick","href","link","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","caption","React","Component","Items","state","items","timer","setInterval","getItems","clearInterval","domain","window","location","hostname","data","forEach","item","itemvotes","push","rendered","_embedded","media_details","sizes","medium","source_url","replace","setState","catch","err","map","App","createElement","logo","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0fdb3334.chunk.js","sourcesContent":["import React from 'react'\nimport DOMPurify from 'dompurify'\n\nclass Item extends React.Component {\n\n  addVote = () => {\n    this.vote('+')\n  }\n  subtractVote = () => {\n    this.vote('-')\n  }\n\n  vote = dir => {\n    console.log(dir);\n    fetch(this.props.nodeUrl + 'vote/' + this.props.type + '-' + this.props.id + '/' + dir, {method: 'post'})\n      .then(result => result.json())\n      .then(result => console.log(result))\n  }\n\n  render() {\n    return (\n      <div key={this.props.id}>\n        <img\n          src={this.props.image}\n          alt={this.props.title}\n        />\n        <div>\n          <span className=\"votes\">{this.props.votes}</span>\n          <button onClick={this.addVote}>+</button>\n          <button onClick={this.subtractVote}>-</button>\n        </div>\n        <div>\n          <h3><a href={this.props.link}>{this.props.title}</a></h3>\n        </div>\n        <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(this.props.caption)}}></div>\n      </div>\n    );\n  }\n}\n\nexport default Item","import React from 'react'\nimport Item from './Item'\n\nclass Items extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {items: []};\n    }\n\n    // starts a timer that refreshes the items every 1000ms (wasteful, yes)\n    componentDidMount() {\n        this.timer = setInterval(()=> this.getItems(), 3000);\n    }\n  \n    componentWillUnmount() {\n        clearInterval(this.timer);\n        this.timer = null; // here...\n    }\n\n    getItems() {\n        let domain = window.location.hostname\n        fetch(this.props.nodeUrl + this.props.type)\n          .then(result => result.json())\n          .then(result => {\n            var items = [];\n            result.data.forEach( item => {\n              // map the complex REST API response to a flatter structure\n              let itemvotes = result.votes[item.id] || 0\n              items.push({\n                id: item.id,\n                title: item.title.rendered,\n                votes: itemvotes,\n                image: item._embedded['wp:featuredmedia'][0].media_details.sizes.medium.source_url.replace('localhost',domain),\n                caption: item._embedded['wp:featuredmedia'][0].caption.rendered.replace('localhost',domain),\n                link: item._embedded['wp:featuredmedia'][0].link.replace('localhost',domain)\n              })\n            })\n          this.setState({items: items })\n        })\n        .catch( err => {\n            console.log( 'Fetch error: ', err)\n        })\n    }\n\n\n    render() {\n\n\n        return (\n        <div>\n          <h1>{this.props.title}</h1>\n          {\n            this.state.items.map(item => (\n              <Item \n                type={this.props.type}\n                nodeUrl={this.props.nodeUrl}\n                id={item.id}\n                image={item.image}\n                title={item.title}\n                link={item.link}\n                caption={item.caption}\n                votes={item.votes}\n              />\n            ))\n          }\n        </div>\n        )\n    }\n}\n\nexport default Items\n\n","import React from 'react';\nimport logo from './wpcomvip_logo_main-white.svg';\n\nimport Items from './Items'\nimport './App.css';\nimport { SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS } from 'constants';\n\nfunction ReactIsInDevelomentMode(){ \n  return '_self' in React.createElement('div');\n}\n\nfunction App() {\n\n  // when testing, nodeURL may need to be set\n  let nodeUrl = window.location.href\n  if (ReactIsInDevelomentMode()) {\n    // point at the running container exposed on 4000\n    nodeUrl = \"http://localhost:4000/\"\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"WordPress VIP\" />\n        <Items title=\"Dutch Foods\" nodeUrl={nodeUrl} type=\"food\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/wpcomvip_logo_main-white.cc61dd33.svg\";"],"sourceRoot":""}